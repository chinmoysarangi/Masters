# ================================== CODE FOR GEOMAPPING IMPLEMENTATION ==================================
import pandas as pd
import pymongo
from pymongo import MongoClient

# Creates MongoDB connection
client = MongoClient("mongodb://localhost:27017/")
mydb = client.Taxi_Database

# Reads Data from MongoDB
green_md = pd.DataFrame(list(mydb.green_2015_data.find({})))
green_md.head()

#Plotting all Pickup points Google Maps

from bokeh.io import output_file, show
from bokeh.models import ColumnDataSource, GMapOptions
from bokeh.plotting import gmap

output_file("Pickup_Points.html")

#Plotting all Pick-up points Google Maps

map_options = GMapOptions(lat = 40.785091, lng = -73.968285, map_type = "roadmap", zoom = 11)
bokeh_plot = gmap("GOOGLE_API_KEY", map_options, title = "NYC Taxi Pick-up Locations")

source2 = ColumnDataSource(
    data = dict(lat = green_md.Pickup_latitude[:500],
              lon = green_md.Pickup_longitude [:500])
)

bokeh_plot.circle(x = "lon", y = "lat", size = 10,  color = "green", fill_alpha = 0.5, source = source2)

show(bokeh_plot)

# Plotting all Dropoff points Google Maps
 
from bokeh.io import output_file, show
from bokeh.models import ColumnDataSource, GMapOptions
from bokeh.plotting import gmap
from bokeh.models.tools import HoverTool

output_file("Dropoff_Points.html")

map_options = GMapOptions(lat = 40.785091, lng = -73.968285, map_type = "roadmap", zoom = 11)
bokeh_plot = gmap("GOOGLE_API_KEY", map_options, title = "NYC Taxi Drop-Off Locations")

source1 = ColumnDataSource(
    data = dict(lat = green_md.Dropoff_latitude[:1000],
              lon = green_md.Dropoff_longitude[:1000])
)

bokeh_plot.circle(x = "lon", y = "lat", size = 10,  color = "red", fill_alpha = 0.5, source = source1)

show(bokeh_plot)

# Plotting Pickup and Dropoff on Google Maps

from bokeh.io import output_file, show
from bokeh.models import ColumnDataSource, GMapOptions
from bokeh.plotting import gmap
from bokeh.models.tools import HoverTool

output_file("Pickup_&_Dropoff.html")

map_options = GMapOptions(lat = 40.785091, lng = -73.968285, map_type = "roadmap", zoom = 11)
bokeh_plot = gmap("GOOGLE_API_KEY", map_options, title = "Overall Pickup and Dropoff Locations")

source1 = ColumnDataSource(
    data = dict(lat = green_md.Dropoff_latitude[:1000],
              lon = green_md.Dropoff_longitude[:1000])
)

source2 = ColumnDataSource(
    data = dict(lat = green_md.Pickup_latitude[:1000],
              lon = green_md.Pickup_longitude [:1000])
)

bokeh_plot.circle(x = "lon", y = "lat", size = 10, color = "red", fill_alpha = 0.25, source = source1)
bokeh_plot.circle(x = "lon", y = "lat", size = 10,  color = "green", fill_alpha = 0.25, source = source2)

show(bokeh_plot)


# ================================== CODE FOR CATEGORICAL DATA IMPLEMENTATION ==================================

from bokeh.io import show, output_file
from bokeh.plotting import figure

fruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']
counts = [5, 3, 4, 2, 4, 6]

p = figure(x_range=fruits, plot_height=250, title="Fruit Counts", toolbar_location=None, tools="")
p.vbar(x=fruits, top=counts, width=0.9)
p.xgrid.grid_line_color = None
p.y_range.start = 0

output_file("bars.html")

show(p)

# ================================== CODE FOR BOKEH SERVER IMPLEMENTATION ==================================

import numpy as np
from bokeh.io import curdoc
from bokeh.layouts import row, column
from bokeh.models import ColumnDataSource
from bokeh.models.widgets import Slider, TextInput
from bokeh.plotting import figure

# Set up data
N = 200
x = np.linspace(0, 4*np.pi, N)
y = np.sin(x)
source = ColumnDataSource(data=dict(x=x, y=y))

# Set up plot
plot = figure(plot_height=400, plot_width=400, title="my sine wave",
              tools="crosshair,pan,reset,save,wheel_zoom",
              x_range=[0, 4*np.pi], y_range=[-2.5, 2.5])
plot.line('x', 'y', source=source, line_width=3, line_alpha=0.6)

# Set up widgets
text = TextInput(title="title", value='my sine wave')
offset = Slider(title="offset", value=0.0, start=-5.0, end=5.0, step=0.1)
amplitude = Slider(title="amplitude", value=1.0, start=-5.0, end=5.0, step=0.1)
phase = Slider(title="phase", value=0.0, start=0.0, end=2*np.pi)
freq = Slider(title="frequency", value=1.0, start=0.1, end=5.1, step=0.1)

# Set up callbacks
def update_title(attrname, old, new):
    plot.title.text = text.value
text.on_change('value', update_title)

def update_data(attrname, old, new):

    # Get the current slider values
    a = amplitude.value
    b = offset.value
    w = phase.value
    k = freq.value

    # Generate the new curve
    x = np.linspace(0, 4*np.pi, N)
    y = a*np.sin(k*x + w) + b

    source.data = dict(x=x, y=y)

for w in [offset, amplitude, phase, freq]:
    w.on_change('value', update_data)

# Set up layouts and add to document
inputs = column(text, offset, amplitude, phase, freq)

curdoc().add_root(row(inputs, plot, width=800))
curdoc().title = "Sliders"

# source: https://github.com/bokeh/bokeh/blob/master/examples/app/sliders.py
# online demo: https://demo.bokeh.org/sliders on https://demo.bokeh.org/
# start server in terminal: bokeh serve --show server-example.py
# jupyter notebook interaction example:
# https://github.com/bokeh/bokeh/blob/1.3.4/examples/howto/notebook_comms/Jupyter%20Interactors.ipynb
